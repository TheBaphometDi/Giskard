import json
import pandas as pd
import giskard
import os
from giskard.rag import generate_testset, KnowledgeBase
from giskard.rag.question_generators import (
    simple_questions,
    complex_questions,
    situational_questions,
    double_questions,
    conversational_questions,
    distracting_questions
)
from datetime import datetime


def setup_giskard_openai():
    try:
        from data_preparation import load_api_keys
        api_keys = load_api_keys()
        if 'openai_api_key' in api_keys and api_keys['openai_api_key']:
            os.environ['OPENAI_API_KEY'] = api_keys['openai_api_key']
            giskard.llm.set_llm_api("openai")
            return True
        else:
            print("‚ö†Ô∏è openai_api_key –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Key.json")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI: {e}")
        return False


def setup_giskard_embeddings():
    try:
        from giskard.llm.embeddings import try_get_fastembed_embeddings
        embeddings = try_get_fastembed_embeddings()
        if embeddings:
            giskard.llm.embeddings.set_default_embedding(embeddings)
            return True
        else:
            print("‚ö†Ô∏è FastEmbed –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install fastembed")
        return False


def create_knowledge_base_from_text(text):
    chunks = []
    words = text.split()
    chunk_size = 80
    for i in range(0, len(words), chunk_size):
        chunk = ' '.join(words[i:i + chunk_size])
        if chunk.strip():
            chunks.append(chunk)
    
    if len(chunks) < 8:
        extended_chunks = chunks * 4
    elif len(chunks) < 15:
        extended_chunks = chunks * 2
    else:
        extended_chunks = chunks
    
    df = pd.DataFrame({
        'content': extended_chunks,
        'source': '–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞'
    })
    return KnowledgeBase(df)


def generate_questions_with_giskard(excerpt):
    print("=" * 60)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –í–û–ü–†–û–°–û–í –ß–ï–†–ï–ó GISCARD")
    print("=" * 60)
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    if not setup_giskard_openai():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ openai_api_key –≤ Key.json")
        return []
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    if not setup_giskard_embeddings():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install fastembed")
        return []
    print("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
    knowledge_base = create_knowledge_base_from_text(excerpt)
    if hasattr(knowledge_base, 'documents'):
        print(f"–°–æ–∑–¥–∞–Ω–æ {len(knowledge_base.documents)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞")
    else:
        print("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Giskard...")
    try:
        testset = generate_testset(
            knowledge_base=knowledge_base,
            num_questions=20,
            language='ru',
            question_generators=[simple_questions, complex_questions],
            agent_description="–ß–∞—Ç-–±–æ—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–æ–º–∞–Ω—É '–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞' –ú–∏—Ö–∞–∏–ª–∞ –ë—É–ª–≥–∞–∫–æ–≤–∞"
        )
        if hasattr(testset, 'questions'):
            samples = testset.questions
        elif hasattr(testset, 'to_pandas'):
            samples = testset.to_pandas().to_dict('records')
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ QATestset")
            return []
        print(f"–£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(samples)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        questions_and_answers = []
        for sample in samples:
            q = sample['question'] if isinstance(sample, dict) else getattr(sample, 'question', None)
            a = sample.get('reference_answer') if isinstance(sample, dict) else getattr(sample, 'reference_answer',
                                                                                        None)
            if q:
                questions_and_answers.append({
                    'question': str(q),
                    'answer': str(a) if a else '–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ'
                })
        return questions_and_answers
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Giskard: {e}")
        return []


def save_giskard_questions(questions, filename=None):
    if filename is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"giskard_questions_{timestamp}.json"
    data = {
        "generator": "Giskard",
        "timestamp": datetime.now().isoformat(),
        "total_questions": len(questions),
        "questions": questions
    }
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    return filename


# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ä—ã–≤–∫–∞
from data_preparation import load_api_keys, initialize_gemini, get_excerpt_by_gemini


def get_excerpt_from_gemini():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ —Ä–æ–º–∞–Ω–∞ —á–µ—Ä–µ–∑ Gemini - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Gemini –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ"""
    try:
        api_keys = load_api_keys()
        gemini_model = initialize_gemini(api_keys)
        excerpt = get_excerpt_by_gemini(gemini_model)
        return excerpt
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—Ä—ã–≤–∫–∞ —á–µ—Ä–µ–∑ Gemini: {e}")
        return None


def run_giskard_generation(return_data=False):
    print("=" * 60)
    print("–ì–ï–ù–ï–†–ê–¶–ò–Ø –í–û–ü–†–û–°–û–í –ß–ï–†–ï–ó GISCARD")
    print("=" * 60)
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ä—ã–≤–∫–∞ –∏–∑ —Ä–æ–º–∞–Ω–∞ —á–µ—Ä–µ–∑ Gemini...")
    excerpt = get_excerpt_from_gemini()
    if not excerpt:
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—Ä—ã–≤–æ–∫ —á–µ—Ä–µ–∑ Gemini")
        return (None, None) if return_data else None
    print(f"‚úÖ –û—Ç—Ä—ã–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Gemini (–¥–ª–∏–Ω–∞: {len(excerpt)} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Giskard...")
    questions = generate_questions_with_giskard(excerpt)
    if not questions:
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Giskard")
        return (None, excerpt) if return_data else None
    
    filename = save_giskard_questions(questions)
    print(f"\n‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Giskard –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    print("\n–ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print("-" * 40)
    for i, qa in enumerate(questions[:5]):
        print(f"{i + 1}. –í–æ–ø—Ä–æ—Å: {qa['question']}")
        print(f"   –û—Ç–≤–µ—Ç: {qa['answer'][:100]}...")
        print()

    if return_data:
        return questions, excerpt
    return filename


if __name__ == "__main__":
    run_giskard_generation()
